# -*- coding: utf-8 -*-
"""model_gorengan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1csvq-522WkeYEShgukztDjYVQF2xsnrK
"""

import pandas as pd
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from tensorflow.keras.callbacks import LearningRateScheduler
from tensorflow.keras.layers import Dense, BatchNormalization, Dropout, Activation
from tensorflow.keras.regularizers import l2

df = pd.read_csv("/content/Dataset_gorengan.csv")

X = df[['GORENGAN', 'weekend', 'awal_bulan', 'akhir_bulan']]
y = df['y']

y_scaled = (y - y.mean()) / y.std()

X_train, X_test, y_train, y_test = train_test_split(X, y_scaled, test_size=0.2, random_state=42)

X_train_mean, X_train_std = X_train.mean(), X_train.std()
X_train_normalized = (X_train - X_train_mean) / X_train_std
X_test_normalized = (X_test - X_train_mean) / X_train_std

model = tf.keras.Sequential([
    Dense(512, kernel_regularizer=l2(0.01)),
    BatchNormalization(),
    Activation('relu'),
    Dropout(0.5),
    Dense(256, kernel_regularizer=l2(0.01)),
    BatchNormalization(),
    Activation('relu'),
    Dropout(0.5),
    Dense(128, kernel_regularizer=l2(0.01)),
    BatchNormalization(),
    Activation('relu'),
    Dense(1)
])

optimizer = tf.keras.optimizers.SGD(learning_rate=0.01, clipnorm=1.0)
model.compile(optimizer=optimizer, loss='mean_squared_error')

history = model.fit(X_train_normalized, y_train, epochs=1000, verbose=1, validation_data=(X_test_normalized, y_test))

y_train_pred_scaled = model.predict(X_train_normalized).flatten()
y_train_pred = y_train_pred_scaled * y.std() + y.mean()
rmse_train = np.sqrt(mean_squared_error(y_train, y_train_pred_scaled))
print(f"Root Mean Squared Error (RMSE) for Training Data: {rmse_train}")

y_test_pred_scaled = model.predict(X_test_normalized).flatten()
y_test_pred = y_test_pred_scaled * y.std() + y.mean()
rmse_test = np.sqrt(mean_squared_error(y_test, y_test_pred_scaled))
print(f"Root Mean Squared Error (RMSE) for Testing Data: {rmse_test}")

new_data = pd.DataFrame({'GORENGAN': [250], 'weekend': [1], 'awal_bulan': [0], 'akhir_bulan': [1]})
new_data_normalized = (new_data - X_train_mean) / X_train_std
prediction_scaled = model.predict(new_data_normalized).flatten()
prediction = prediction_scaled * y.std() + y.mean()
print(f"Predicted optimal stock item (gorengan): {prediction[0]}")

new_data = pd.DataFrame({'GORENGAN': [226], 'weekend': [0], 'awal_bulan': [0], 'akhir_bulan': [0]})
new_data_normalized = (new_data - X_train_mean) / X_train_std
prediction_scaled = model.predict(new_data_normalized).flatten()
prediction = prediction_scaled * y.std() + y.mean()
print(f"Predicted optimal stock item (gorengan): {prediction[0]}")

model.summary()